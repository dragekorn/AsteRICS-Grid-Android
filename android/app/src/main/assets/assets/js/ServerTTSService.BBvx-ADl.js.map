{"version":3,"file":"ServerTTSService.BBvx-ADl.js","sources":["../../../src/js/service/tts/ServerTTSService.ts"],"sourcesContent":["/**\n * TTS сервис использующий AAC NLP сервер.\n * \n * Особенности:\n * - Склонение слов на сервере\n * - Качественный голос Piper\n * - Кеширование аудио\n */\n\nimport { TTSService, type ITTSSynthesizeOptions } from './TTSService';\nimport type { ITTSResult, ITTSStatus, IVoiceModel } from '@/js/types/global';\nimport { nlpClient } from '@/js/service/api/NLPClient';\nimport { createLogger } from '@/js/util/Logger';\nimport { performanceMonitor } from '@/js/util/PerformanceMonitor';\n\nconst logger = createLogger('ServerTTSService');\n\nexport class ServerTTSService extends TTSService {\n  private serverAvailable = false;\n\n  public async initialize(): Promise<void> {\n    performanceMonitor.mark('server-tts-init-start');\n\n    try {\n      // Проверяем доступность сервера с коротким таймаутом\n      const healthPromise = nlpClient.healthCheck();\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Health check timeout')), 3000);\n      });\n      \n      const health = await Promise.race([healthPromise, timeoutPromise]);\n      \n      this.serverAvailable = health.status === 'ok';\n      this.isInitialized = true;\n\n      performanceMonitor.measure('server-tts-init', 'server-tts-init-start');\n\n      logger.info('Server TTS initialized', {\n        serverAvailable: this.serverAvailable,\n        model: health.model,\n      });\n    } catch (error) {\n      logger.error('Failed to initialize Server TTS', error);\n      throw error;\n    }\n  }\n\n  public async synthesize(options: ITTSSynthesizeOptions): Promise<ITTSResult> {\n    this.ensureInitialized();\n\n    if (!this.serverAvailable) {\n      throw new Error('Server is not available');\n    }\n\n    const requestId = this.generateRequestId();\n    performanceMonitor.mark(`server-tts-synth-${requestId}`);\n\n    try {\n      const validatedOptions = this.validateOptions(options);\n\n      logger.debug('Synthesizing via server', {\n        requestId,\n        text: validatedOptions.text,\n      });\n\n      // Разбиваем текст на слова для сервера\n      const words = validatedOptions.text.split(/\\s+/).filter(w => w.length > 0);\n\n      // Генерируем речь через сервер\n      const audioData = await nlpClient.generateSpeech(words);\n\n      const synthesisTime = performanceMonitor.measure(\n        `server-tts-synth-${requestId}`,\n        `server-tts-synth-${requestId}`\n      );\n\n      const result: ITTSResult = {\n        requestId,\n        audioData,\n        duration: this.estimateDuration(audioData),\n        sampleRate: 22050,\n        channels: 1,\n        synthesisTime,\n      };\n\n      logger.info('Server synthesis completed', {\n        requestId,\n        duration: result.duration,\n        synthesisTime: result.synthesisTime,\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Server synthesis failed', error);\n      throw error;\n    }\n  }\n\n  public async getAvailableVoices(): Promise<readonly IVoiceModel[]> {\n    return [\n      {\n        id: 'ru_RU-irina-medium',\n        name: 'Ирина (средний)',\n        language: 'ru-RU',\n        gender: 'female',\n        sampleRate: 22050,\n        modelSize: 28 * 1024 * 1024, // 28 MB\n        quality: 'medium',\n        loaded: this.serverAvailable,\n      },\n    ];\n  }\n\n  public getStatus(): ITTSStatus {\n    return {\n      initialized: this.isInitialized,\n      activeRequests: 0,\n      queuedRequests: 0,\n      availableVoices: ['ru_RU-irina-medium'],\n      memoryUsage: 0,\n      lastError: null,\n    };\n  }\n\n  public async cleanup(): Promise<void> {\n    this.stop();\n    this.isInitialized = false;\n    this.serverAvailable = false;\n    logger.info('Server TTS cleaned up');\n  }\n\n  private estimateDuration(audioData: ArrayBuffer): number {\n    // WAV header: 44 bytes, потом данные\n    // Для 22050 Hz, 1 канал, 16 bit = 2 bytes per sample\n    const dataSize = audioData.byteLength - 44;\n    const bytesPerSecond = 22050 * 2; // 22050 samples/sec * 2 bytes/sample\n    return dataSize / bytesPerSecond;\n  }\n}\n"],"names":["logger","createLogger","ServerTTSService","TTSService","constructor","super","arguments","this","initialize","performanceMonitor","mark","healthPromise","nlpClient","healthCheck","timeoutPromise","Promise","_","reject","setTimeout","Error","health","race","serverAvailable","status","isInitialized","measure","info","model","error","synthesize","options","ensureInitialized","requestId","generateRequestId","validatedOptions","validateOptions","debug","text","words","split","filter","w","length","audioData","generateSpeech","synthesisTime","result","duration","estimateDuration","sampleRate","channels","getAvailableVoices","id","name","language","gender","modelSize","quality","loaded","getStatus","initialized","activeRequests","queuedRequests","availableVoices","memoryUsage","lastError","cleanup","stop","byteLength"],"mappings":"yFAeA,MAAMA,EAASC,EAAa,oBAErB,MAAMC,UAAyBC,EAA/B,WAAAC,SAAAC,SAAAC,iGACGC,wBAAA,2BAAkB,EAAA,CAE1B,gBAAaC,GACXC,EAAmBC,KAAK,yBAExB,IAEE,MAAMC,EAAgBC,EAAUC,cAC1BC,EAAiB,IAAIC,QAAe,CAACC,EAAGC,KAC5CC,WAAW,IAAMD,EAAO,IAAIE,MAAM,yBAA0B,OAGxDC,QAAeL,QAAQM,KAAK,CAACV,EAAeG,IAElDP,KAAKe,gBAAoC,OAAlBF,EAAOG,OAC9BhB,KAAKiB,eAAgB,EAErBf,EAAmBgB,QAAQ,kBAAmB,yBAE9CzB,EAAO0B,KAAK,yBAA0B,CACpCJ,gBAAiBf,KAAKe,gBACtBK,MAAOP,EAAOO,OAElB,OAASC,GAEP,MADA5B,EAAO4B,MAAM,kCAAmCA,GAC1CA,CACR,CACF,CAEA,gBAAaC,CAAWC,GAGtB,GAFAvB,KAAKwB,qBAEAxB,KAAKe,gBACR,MAAM,IAAIH,MAAM,2BAGlB,MAAMa,EAAYzB,KAAK0B,oBACvBxB,EAAmBC,KAAK,oBAAoBsB,KAE5C,IACE,MAAME,EAAmB3B,KAAK4B,gBAAgBL,GAE9C9B,EAAOoC,MAAM,0BAA2B,CACtCJ,YACAK,KAAMH,EAAiBG,OAIzB,MAAMC,EAAQJ,EAAiBG,KAAKE,MAAM,OAAOC,OAAOC,GAAKA,EAAEC,OAAS,GAGlEC,QAAkB/B,EAAUgC,eAAeN,GAE3CO,EAAgBpC,EAAmBgB,QACvC,oBAAoBO,IACpB,oBAAoBA,KAGhBc,EAAqB,CACzBd,YACAW,YACAI,SAAUxC,KAAKyC,iBAAiBL,GAChCM,WAAY,MACZC,SAAU,EACVL,iBASF,OANA7C,EAAO0B,KAAK,6BAA8B,CACxCM,YACAe,SAAUD,EAAOC,SACjBF,cAAeC,EAAOD,gBAGjBC,CACT,OAASlB,GAEP,MADA5B,EAAO4B,MAAM,0BAA2BA,GAClCA,CACR,CACF,CAEA,wBAAauB,GACX,MAAO,CACL,CACEC,GAAI,qBACJC,KAAM,kBACNC,SAAU,QACVC,OAAQ,SACRN,WAAY,MACZO,UAAW,SACXC,QAAS,SACTC,OAAQnD,KAAKe,iBAGnB,CAEO,SAAAqC,GACL,MAAO,CACLC,YAAarD,KAAKiB,cAClBqC,eAAgB,EAChBC,eAAgB,EAChBC,gBAAiB,CAAC,sBAClBC,YAAa,EACbC,UAAW,KAEf,CAEA,aAAaC,GACX3D,KAAK4D,OACL5D,KAAKiB,eAAgB,EACrBjB,KAAKe,iBAAkB,EACvBtB,EAAO0B,KAAK,wBACd,CAEQ,gBAAAsB,CAAiBL,GAKvB,OAFiBA,EAAUyB,WAAa,IACjB,KAEzB"}