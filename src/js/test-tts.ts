/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è TTS
 */

import { TTSServiceFactory } from './service/tts/TTSService';
import { nlpClient } from './service/api/NLPClient';
import { createLogger } from './util/Logger';

const logger = createLogger('TestTTS');

async function testTTS(): Promise<void> {
  const appDiv = document.getElementById('app');
  if (!appDiv) return;

  appDiv.innerHTML = `
    <div style="padding: 20px; font-family: Arial; max-width: 600px;">
      <h1>üé§ TTS –¢–µ—Å—Ç</h1>
      
      <div style="margin: 20px 0;">
        <label>IP —Å–µ—Ä–≤–µ—Ä–∞:</label><br>
        <input type="text" id="serverUrl" value="http://192.168.0.104:5000" style="width: 100%; padding: 8px;">
        <button id="setServer" style="margin-top: 5px; padding: 8px 16px;">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
        <button id="testServer" style="margin-top: 5px; padding: 8px 16px; background: #4CAF50; color: white; border: none;">–¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞</button>
      </div>
      
      <div style="margin: 20px 0;">
        <label>–í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):</label><br>
        <input type="text" id="wordsInput" value="–Ø –æ–±–Ω–∏–º–∞—Ç—å—Å—è –º–∞–º–∞ –ø–∞–ø–∞" style="width: 100%; padding: 8px;">
      </div>
      
      <button id="speakBtn" style="padding: 10px 20px; font-size: 16px; background: #2196F3; color: white; border: none; cursor: pointer;">
        üîä –û–∑–≤—É—á–∏—Ç—å
      </button>
      
      <div id="status" style="margin-top: 20px; padding: 10px; background: #f0f0f0; border-radius: 4px; white-space: pre-wrap; font-family: monospace; font-size: 12px; max-height: 400px; overflow-y: auto;">
        –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
      </div>
      
      <div id="logs" style="margin-top: 20px; padding: 10px; background: #263238; color: #aed581; border-radius: 4px; white-space: pre-wrap; font-family: monospace; font-size: 11px; max-height: 300px; overflow-y: auto;">
        === –õ–û–ì–ò ===
      </div>
    </div>
  `;

  const serverUrlInput = document.getElementById('serverUrl') as HTMLInputElement;
  const setServerBtn = document.getElementById('setServer');
  const testServerBtn = document.getElementById('testServer');
  const wordsInput = document.getElementById('wordsInput') as HTMLInputElement;
  const speakBtn = document.getElementById('speakBtn');
  const statusDiv = document.getElementById('status');
  const logsDiv = document.getElementById('logs');

  function addLog(msg: string): void {
    const timestamp = new Date().toLocaleTimeString();
    if (logsDiv) {
      logsDiv.textContent += `\n[${timestamp}] ${msg}`;
      logsDiv.scrollTop = logsDiv.scrollHeight;
    }
    console.log(msg);
  }

  function updateStatus(msg: string, isError = false): void {
    if (statusDiv) {
      statusDiv.textContent = msg;
      statusDiv.style.background = isError ? '#ffebee' : '#e8f5e9';
    }
    addLog(msg);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  window.addEventListener('error', (e) => {
    addLog(`üî¥ GLOBAL ERROR: ${e.message} at ${e.filename}:${e.lineno}`);
  });

  window.addEventListener('unhandledrejection', (e) => {
    addLog(`üî¥ UNHANDLED REJECTION: ${e.reason}`);
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ URL —Å–µ—Ä–≤–µ—Ä–∞
  setServerBtn?.addEventListener('click', () => {
    const url = serverUrlInput.value.trim();
    nlpClient.setServerUrl(url);
    updateStatus(`–°–µ—Ä–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${url}`);
  });

  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
  testServerBtn?.addEventListener('click', async () => {
    const url = serverUrlInput.value.trim();
    addLog(`üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${url}...`);
    
    try {
      updateStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ /health...');
      const response = await fetch(`${url}/health`, {
        method: 'GET',
        signal: AbortSignal.timeout(5000),
      });
      
      addLog(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        updateStatus(`‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${response.status}`, true);
        return;
      }
      
      const data = await response.json();
      addLog(`‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(data, null, 2)}`);
      updateStatus(`‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! Model: ${data.model || 'unknown'}`);
      
    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.name} - ${err.message}`);
      addLog(`Stack: ${err.stack}`);
      updateStatus(`‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: ${err.message}`, true);
    }
  });

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
  speakBtn?.addEventListener('click', async () => {
    try {
      addLog('üé§ –ù–∞—á–∏–Ω–∞—é –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ...');
      updateStatus('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS...');
      
      addLog('üì¶ –°–æ–∑–¥–∞—é TTS —Å–µ—Ä–≤–∏—Å...');
      const tts = await TTSServiceFactory.getInstance();
      addLog('‚úÖ TTS —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω');
      
      const text = wordsInput.value.trim();
      const words = text.split(/\s+/).filter(w => w.length > 0);
      
      addLog(`üìù –°–ª–æ–≤–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏: ${words.join(', ')}`);
      updateStatus(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ –¥–ª—è: ${words.join(', ')}...`);
      
      addLog('üîä –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...');
      const result = await tts.synthesize({ text });
      addLog(`‚úÖ –†–µ—á—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∞. –†–∞–∑–º–µ—Ä: ${result.audioData.byteLength} bytes`);
      
      updateStatus('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...');
      
      await tts.play(result, {
        onEnd: () => {
          addLog('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          updateStatus('‚úÖ –ì–æ—Ç–æ–≤–æ!');
        },
        onError: (err) => {
          addLog(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${err.message}`);
          updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, true);
        },
      });
      
    } catch (error) {
      const err = error instanceof Error ? error : new Error(String(error));
      logger.error('Test failed', err);
      addLog(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${err.name} - ${err.message}`);
      addLog(`Stack: ${err.stack}`);
      updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, true);
    }
  });

  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  addLog('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
  addLog(`üì± UserAgent: ${navigator.userAgent}`);
  addLog(`üåê URL: ${window.location.href}`);
  addLog(`üîå –°–µ—Ä–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://192.168.0.104:5000`);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => void testTTS());
} else {
  void testTTS();
}
